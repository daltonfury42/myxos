alias sysCallNo S1;
alias physicalSP S6;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
sysCallNo = [physicalSP - 1];
alias PCB S10;
alias deadPCB S9;

if(sysCallNo == 10) then
	//Exit
	alias i S0;
	//Resume any processes waiting for this process
	i = 0;
	while(i<32) do
		if ([READY_LIST + i*32 + 1] == 100 + (PTBR - 1024)/8) then
			[READY_LIST + i*32 + 1] = 1;
		endif;
		i = i + 1;
	endwhile;

	//Find the next ready process
	i = 0;
	while (i<32) do
		if([READY_LIST + i*32 + 1] == 1) then
			break;
		endif;
		i = i + 1;
	endwhile;

	//If there is no ready process, halt the machine.
	if(i == 32) then
		halt;
	endif;

	//Find PCB of current process
	i = 0;
	while (i<32) do
		if([READY_LIST + i*32 + 1] == 2) then
			break;
		endif;
		i = i + 1;
	endwhile;

	PCB = i;
	breakpoint;

	alias fileDiscriptor S2; //Close any open files.
	fileDiscriptor = 0;
	while (fileDiscriptor < 8) do
		alias sysWideFOTindex S4;
		sysWideFOTindex = [READY_LIST + PCB*32 + 15 + fileDiscriptor*2];
		if (sysWideFOTindex != -1) then
			[1344 + sysWideFOTindex*2 + 1] = [1344 + sysWideFOTindex*2 + 1] - 1;
			if ([1344 + sysWideFOTindex*2 + 1] == 0) then
				[1344 + sysWideFOTindex*2] = -1;
			endif;

			[READY_LIST + PCB*32 + 15 + fileDiscriptor*2] = -1;
		endif;
		fileDiscriptor = fileDiscriptor + 1;
	endwhile;
	
	//Set process to terminated
	[READY_LIST + PCB*32 + 1] = 0;
	
	//Free memory, and invalidate the page table.
	i = 0;
	while(i < PTLR) do
		if([PTBR + i*2] != -1) then
			if ([PTBR + i*2] < 448) then
				[MEM_LIST + [PTBR + i*2]] = [MEM_LIST + [PTBR + i*2]] - 1;
			else
				[DISK_LIST + [PTBR + i*2]] = [DISK_LIST + [PTBR + i*2]] - 1;
				store(DISK_LIST/512, 20);
			endif;
			[PTBR + i*2] = -1;
			[PTBR + i*2 + 1] = "00";
		endif;
		i = i + 1;
	endwhile;
	
	//Find next process to runs (to be continued in the common if below)
	deadPCB = READY_LIST + PCB*32;
	PCB = READY_LIST + PCB*32 + 32;
endif;

if (sysCallNo == 13) then 
	//Implememntation of Wait
	alias WaitingPID S7;
	WaitingPID = [physicalSP - 3];
	if ([READY_LIST + WaitingPID*32 + 1] == 2 || [READY_LIST + WaitingPID*32 + 1] == 0) then 
		[physicalSP -2] = -1;
		ireturn;
	endif;
	[physicalSP - 2] = 0;
	alias currentPID S8;
	currentPID = (PTBR - PAGE_TABLE)/8;

	[READY_LIST + currentPID*32 + 1] = 100 + WaitingPID;

	//save current process to PCB
	[READY_LIST + currentPID*32 + 2] = BP; 
	[READY_LIST + currentPID*32 + 3] = SP-1;
	[READY_LIST + currentPID*32 + 4] = [physicalSP];
	[READY_LIST + currentPID*32 + 7] = R0;
	[READY_LIST + currentPID*32 + 8] = R1;
	[READY_LIST + currentPID*32 + 9] = R2;
	[READY_LIST + currentPID*32 +10] = R3;
	[READY_LIST + currentPID*32 +11] = R4;
	[READY_LIST + currentPID*32 +12] = R5;
	[READY_LIST + currentPID*32 +13] = R6;
	[READY_LIST + currentPID*32 +14] = R7;
	
	//Find next process to runs
	deadPCB = READY_LIST + currentPID*32;
	PCB = deadPCB + 32;
	[physicalSP - 2] = 0;
endif;

if (sysCallNo == 13 || sysCallNo == 10) then 
	breakpoint;
	while(PCB != deadPCB) do
	print("PCB:");
	print(PCB);
		if([PCB + 1] == 1) then
			break;
		endif;
		if(PCB <= READY_LIST + 32*31) then
			PCB = PCB+32;
		else
			PCB = READY_LIST;
		endif;
	endwhile;
	[PCB + 1] = 2;
	BP = [PCB + 2];
	SP = [PCB + 3];
	PTBR = [PCB + 5];
	PTLR = [PCB + 6];

	R0 = [PCB + 7];
	R1 = [PCB + 8];
	R2 = [PCB + 9];
	R3 = [PCB +10];
	R4 = [PCB +11];
	R5 = [PCB +12];
	R6 = [PCB +13];
	R7 = [PCB +14];

	if(sysCallNo == 10) then
		breakpoint;
	endif;
	SP = SP + 1;
	physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
	[physicalSP] = [PCB + 4];
	ireturn;
endif;

if (sysCallNo == 14) then 
	alias i S0;
	alias PID S11;
	PID = (PTBR - PAGE_TABLE)/8;
	i = 0;
	while(i<32) do
		if ([READY_LIST + i*32 + 1] == 100 + PID) then
			[READY_LIST + i*32 + 1] = 1;
		endif;
		i = i + 1;
	endwhile;
	[physicalSP - 2] = 0;
	ireturn;
endif;
