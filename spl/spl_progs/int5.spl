alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

// Get system call no. from the stack and put it in a register
alias sysCallNo S1;

sysCallNo = [physicalSP - 1];

// Get arguments from stack and put it in registers

if ( sysCallNo == 8) then
// Implementation of Fork 
	//Finding a free PCB
	alias newPID S2;
	newPID = 0;
	while(newPID < 32) do
		if([READY_LIST + newPID*32 + 1] == 0) then
			break;
		endif;
		newPID = newPID + 1;
	endwhile;
	if(newPID == 32) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	[READY_LIST + newPID*32] = newPID; //Set PIDA
	[READY_LIST + newPID*32 + 1] = 1; 	//state = ready
	[READY_LIST + newPID*32 + 5] = PAGE_TABLE + newPID*8; //Set PTBR
	[READY_LIST + newPID*32 + 6] = 4; //Set PTLR
 	[READY_LIST + newPID*32 + 4] = [physicalSP]; //Set IP
	[READY_LIST + newPID*32 + 3] = SP - 1;
	[READY_LIST + newPID*32 + 2] = BP;
	[READY_LIST + newPID*32 + 7] = R0;
	[READY_LIST + newPID*32 + 8] = R1;
	[READY_LIST + newPID*32 + 9] = R2;
	[READY_LIST + newPID*32 +10] = R3;
	[READY_LIST + newPID*32 +11] = R4;
	[READY_LIST + newPID*32 +12] = R5;
	[READY_LIST + newPID*32 +13] = R6;
	[READY_LIST + newPID*32 +14] = R7;
	[READY_LIST + newPID*32 + 31] = (PTBR - PAGE_TABLE)/8;
	alias counter S3;
	counter = 15;
	while (counter < 30) do
		[READY_LIST + newPID*32 + counter] = [READY_LIST + (PTBR - PAGE_TABLE)/8*32 + counter];
		[READY_LIST + newPID*32 + counter + 1] = [READY_LIST + (PTBR - PAGE_TABLE)/8*32 + counter + 1];
		if([READY_LIST + (PTBR - PAGE_TABLE)/8*32 + counter] != -1) then
			[FILE_TABLE + [READY_LIST + (PTBR - PAGE_TABLE)/8*32 + counter]*2 + 1] = [FILE_TABLE + [READY_LIST + (PTBR - PAGE_TABLE)/8*32 + counter]*2 + 1] + 1;
		endif;
		counter = counter + 2;
	endwhile;

	//Find a free page for stack
	counter = 0;
	while(counter < 64) do
		if([MEM_LIST + counter] == 0) then
			break;
		endif;
		counter = counter + 1;
	endwhile;
	if (counter == 64) then
	alias pTableEntry S7;
	pTableEntry = PAGE_TABLE - 2;
	while (1 == 1) do
		pTableEntry = pTableEntry + 2;
		//make it look circular
		if (pTableEntry == 1280) then
			pTableEntry = PAGE_TABLE - 2;
			continue;
		endif;
		//ignore stack
		if ((pTableEntry - (PAGE_TABLE + 6)) % 8 == 0) then 
			continue;
		endif;

		if ([pTableEntry + 1] == "11") then 
			[pTableEntry + 1] = "01";
			continue;
		endif;

		if ([pTableEntry + 1] == "00") then
			continue;
		endif;
		//You can't swap out this page if it is referened by some other process
		if ([MEM_LIST + [pTableEntry]] != 1) then      //What will happen if all pages are referenced by atleast one process?
			continue;
		endif;
		// [pTableEntry + 1] == "01" // Swap out victim page idetified!
		break;
	endwhile;
		// Scan for a free block in swap
		alias freeSwapBlock S8;
		freeSwapBlock = 448;
		while (freeSwapBlock < 512) do
			if ([DISK_LIST + freeSwapBlock] == 0) then
				[DISK_LIST + freeSwapBlock] = 1;
				break;
			endif;
			freeSwapBlock = freeSwapBlock + 1;
		endwhile;
		if (freeSwapBlock == 512) then
			print("Swap Full");
			halt;
		endif;
		store([pTableEntry], freeSwapBlock);
		counter = [pTableEntry];
		[pTableEntry] = freeSwapBlock;
		[pTableEntry + 1] = "00";		
	endif;

	//Use the free page for stack
	alias newStack S4;
	newStack = counter;
	[MEM_LIST + newStack] = 1;

	//copy parent stack word by word;
	alias oldStack S5;
	oldStack = [PTBR + 6];
	counter = 0;
	while(counter < 512) do
		[newStack*512 + counter] = [oldStack*512 + counter];
		counter = counter + 1;
	endwhile;
	alias newPTBR S6;
	newPTBR = PAGE_TABLE + newPID*8; 
	[newPTBR + 6] = newStack;
	[newPTBR + 7] = "01";

	//Copying the page table for all other pages except the stack
	counter = 0;
	while (counter < PTLR -1) do
		[newPTBR + counter*2] = [PTBR + counter*2];
		[newPTBR + counter*2 + 1] = [PTBR + counter*2 + 1];
		if([newPTBR + counter*2 + 1] == "01" || [newPTBR + counter*2 + 1] == "11") then
			[MEM_LIST + [newPTBR + counter*2]] = [MEM_LIST +[newPTBR + counter*2]] + 1;
		endif;
		if([newPTBR + counter*2 + 1] == "00" && [newPTBR + counter*2] >= 448) then
			[DISK_LIST + [newPTBR + counter*2]] = [DISK_LIST + [newPTBR + counter*2]] + 1;
		endif;
		counter = counter + 1;
	endwhile;
	
	[physicalSP - 2] = newPID;
	[[newPTBR + 2*SP/512]*512 + (SP - 1)%512 -1] = -2;
	ireturn;
endif;	
